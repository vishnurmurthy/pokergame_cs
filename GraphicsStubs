import edu.neu.ccs.*;
import edu.neu.ccs.gui.*;
import edu.neu.ccs.util.*;

import java.awt.*;
import javax.swing.*;

/**
 * <p>Class <code>PlayingCards</code> displays images
 * of the 52 traditional cards in the suits
 * hearts, diamonds, spades, and clubs,
 * plus 2 card backs and 2 jokers.</p>
 */
public class PlayingCards
    extends DisplayPanel
{
    /** The default size of the graphics window: 500. */
    public static int SIZE = 500;
    
    /** The minimum size of the graphics window: 500. */
    public static int MINIMUM_SIZE = 500;
    
    
    /**
     * <p>The JFitz card deck URL.</p>
     * 
     * <p><code>http://www.ccs.neu.edu/jpt/images/jfitz_cards/</code></p>
     */
    public static final String cardsURL  =
        "http://www.ccs.neu.edu/jpt/images/jfitz_cards/";
    
    /**
     * <p>The image list file name for reading the 52 cards,
     * plus the 2 card backs and 2 jokers.</p>
     * 
     * <p><code>imagelist.txt</code></p>
     */
    public static final String cardsList = "imagelist.txt";
    
    
    /** The JFitz card deck as an <code>ImagePaintableLite[]</code>. */
    protected ImagePaintableLite[] cards = null;
    
    
    /** The size of the card deck. */
    protected int N = 0;
    
    
    /** The table panel gap. */
    protected int gap = 20;
    
    
    /** The edge size for card placement in the graphics window. */
    protected int edge = 5;
    
    
    /** The BufferedPanel window. */
    protected BufferedPanel window = null;
    
    
    /** The window width. */
    protected int w0;
    
    /** The window height. */
    protected int h0;
    
    
    /** The card width. */
    protected int w1;
    
    /** The card height. */
    protected int h1;
    
    
    /** The minimum x position for a random card. */
    protected int minX;
    
    /** The maximum x position for a random card. */
    protected int maxX;
    
    /** The minimum y position for a random card. */
    protected int minY;
    
    /** The maximum y position for a random card. */
    protected int maxY;
    
    
    /** The action to show sorted cards. */
    protected SimpleAction sortedCardsAction =
        new SimpleAction("Sorted Cards") {
            public void perform() { showSortedCards(); }
    };
    
    
    /** The action to show random cards. */
    protected SimpleAction randomCardsAction =
        new SimpleAction("Random Cards") {
            public void perform() { showRandomCards(); }
    };
    
    
    /**
     * <p>The default constructor.</p>
     *
     * <p>Uses a square graphics window of size <code>SIZE</code>.</p>
     */
    public PlayingCards() {
        this(SIZE, SIZE);
    }
    
    
    /**
     * <p>The constructor that specifies the width and height
     * of the graphics window as a single value size.</p>
     * 
     * <p>The value size will be increased if need be to the
     * value <code>MINIMUM_SIZE</code>.</p>
     * 
     * @param size the width and the height of the window
     */
    public PlayingCards(int size) {
        this(size, size);
    }
    
    
    /**
     * <p>The constructor that specifies the width and height
     * of the graphics window separately.</p>
     * 
     * <p>The values width and height will be increased if
     * need be to the value <code>MINIMUM_SIZE</code>.</p>
     * 
     * @param width  the width  of the window
     * @param height the height of the window
     */
    public PlayingCards(int width, int height) {
        w0 = (width  < MINIMUM_SIZE) ? MINIMUM_SIZE : width;
        h0 = (height < MINIMUM_SIZE) ? MINIMUM_SIZE : height;
        
        initialize();
    }
    
    
    /**
     * <p>Initialize the playing cards and create the GUI.</p>
     * 
     * <p>If the playing cards cannot be fetched from the web,
     * the GUI will simply contain an error message.</p>
     */
    protected void initialize() {
        fetchCards();
        
        // If the cards cannot be fetched from the web,
        // place an error message in the GUI and return
        if (N == 0) {
            addObject("The Playing Card Images Failed to Load From The Web");
            return;
        }
        
        // initialize window
        window = new BufferedPanel(w0, h0);
        window.installSimpleMouseActions(true);
        
        // initialize constants
        w1 = cards[0].getImageWidth();
        h1 = cards[0].getImageHeight();
        
        minX = edge;
        maxX = w0 - w1 - minX;
        
        minY = edge;
        maxY = h0 - h1 - minY;
        
        // create the GUI
        createGUI();
        
        // show playing cards in random order and in random positions
        showRandomCards();
    }
    
    
    /** Create GUI. */
    protected void createGUI() {
        window.lineBorder(2);
        window.setBufferBackground(Colors.green);
        
        JButton sortedButton = new JButton(sortedCardsAction);
        sortedButton.setBackground(Colors.tan);
        
        JButton randomButton = new JButton(randomCardsAction);
        randomButton.setBackground(Colors.tan);
        
        Object[] buttonStuff = { sortedButton, randomButton };
        HTable   buttonTable = new HTable(buttonStuff, gap, gap, CENTER);
        
        buttonTable.setBackground(Colors.white);
        
        Object[] mainStuff = { window, buttonTable };
        VTable   mainTable = new VTable(mainStuff, gap, gap, CENTER);
        
        mainTable.setBackground(Colors.white);
        mainTable.emptyBorder(gap);
        mainTable.lineBorder(2);
       
        addObject(mainTable);
    }
    
    
    /**
     * <p>Show playing cards in sorted order.</p>
     * 
     * <p>Columns 0, 1, 2, 3 show hearts, diamonds, spades, clubs.</p>
     * 
     * <p>Column 4 shows the card backs and the jokers.</p>
     */
    public void showSortedCards() {
        // exit if the cards could not be read
        if (N == 0)
            return;
        
        // clear the window and paint its background
        window.clearPanelAndSequence();
        
        int x0 = edge;
        int y0 = edge;
        
        int spacing = (w0 - 2 * edge) / 5;
        
        int dx = edge;
        int dy = 6 * edge;
        
        for (int col = 0; col < 5; col++) {
            int x = x0 + col * spacing;
            int y = y0;
            
            for (int row = 0; row < 13; row ++) {
                int k = 13 * col + row;
                
                if (k >= N)
                    break;
                
                cards[k].moveCornerTo(x, y);
                window.appendPaintable(cards[k]);
                
                x += dx;
                y += dy;
            }
        }
        
        // make all changes visible
        window.repaint();
    }
    
    
    /** Show playing cards in random order and in random positions. */
    public void showRandomCards() {
        // exit if the cards could not be read
        if (N == 0)
            return;
        
        // clear the window and paint its background
        window.clearPanelAndSequence();
        
        // obtain a permutation for randomizing the cards
        int[] permutation = ProbStatTools.randomPermutation(N);
        
        for (int i = 0; i < N; i++) {
            // pick a random card using the permutation
            int k = permutation[i];
            Paintable card = cards[k];
            
            // compute a random position for this card
            int x = MathUtilities.randomInt(minX, maxX);
            int y = MathUtilities.randomInt(minY, maxY);
            
            // move this card
            card.moveCornerTo(x, y);
            
            // append this card to the window sequence
            window.appendPaintable(card);
        }
        
        // make all changes visible
        window.repaint();
    }
    
    
    protected void fetchCards() {
        if (N > 0)
            return;
        
        cards = WebImageTools.readImagesAsPaintableLite(cardsURL, cardsList);
        N = cards.length;
    }
    
    
    /**
     * <p>Construct a <code>PlayingCards</code> panel and put
     * it in its own frame.</p>
     * 
     * <p>This method allows this class to launch itself as a
     * Java application.</p>
     * 
     * @param args ignored
     */
    public static void main(String[] args) {
        new PlayingCards().frame("Playing Cards");
    }
    
}
